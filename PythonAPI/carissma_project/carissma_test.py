#!/usr/bin/env python

import glob
import os
import sys

try:
    sys.path.append(glob.glob('../**/*%d.%d-%s.egg' % (
        sys.version_info.major,
        sys.version_info.minor,
        'win-amd64' if os.name == 'nt' else 'linux-x86_64'))[0])
except IndexError:
    pass

import carla

import random
import time

# TODO: output video format. error mean only after settling time
def main():

    actor_list = []
    verboseIsEnabled = None
    try:
        """
        Section for starting the client and connecting to the server
        """
        client = carla.Client('localhost', 2000)
        client.set_timeout(2.0)

        for arg in sys.argv:
            if (arg == '--verbose'):
                verboseIsEnabled = True

        if verboseIsEnabled:
            print('client version: %s' % client.get_client_version())
            print('server version: %s' % client.get_server_version())
            print('client to server connection status: {}'.format(client.get_server_version()))

            print('Retrieving the world data from server...')

        world = client.get_world()
        if verboseIsEnabled:
            print('{} \n'.format(world))

        """
        Section for retrieving the blueprints and spawn the actors
        """
        blueprint_library = world.get_blueprint_library()
        if verboseIsEnabled:
            print('\nRetrieving CARLA blueprint library...')
            print('\nobject: %s\n\nblueprint methods: %s\n\nblueprint list:' % (type(blueprint_library), dir(blueprint_library)) )
            for blueprint in blueprint_library:
                print(blueprint)

        audi_blueprint = blueprint_library.find('vehicle.audi.tt')
        print('\n%s\n' % audi_blueprint)

        color = '191,191,191'
        audi_blueprint.set_attribute('color', color)

        # Place measured in map 'carissma_scenario' 32
        transform = carla.Transform(
            carla.Location(x=32.4, y=76.199997, z=39.22),
            carla.Rotation(yaw=0.0))

        vehicleEgo = world.spawn_actor(audi_blueprint, transform)
        actor_list.append(vehicleEgo)
        print('created %s' % vehicleEgo.type_id)

	transform = carla.Transform(
	carla.Location(
		x=88.2, y=93.5,
		z=38.98),carla.Rotation(yaw=-90.0)
	)

	color = random.choice(audi_blueprint.get_attribute('color').recommended_values)
	audi_blueprint.set_attribute('color', color)

        vehicleObservable = world.spawn_actor(audi_blueprint, transform)
        actor_list.append(vehicleObservable)
        print('created %s' % vehicleObservable.type_id)

        '''
        time.sleep(1.5)
        vehicleEgo.apply_control(carla.VehicleControl(throttle=.3))
	elapsed_time = 0
	time_increment = 0.1
        '''

        # Find the blueprint of the sensor.
        blueprint = world.get_blueprint_library().find('sensor.camera.rgb')
        # Modify the attributes of the blueprint to set image resolution and field of view.
        blueprint.set_attribute('image_size_x', '1920')
        blueprint.set_attribute('image_size_y', '1080')
        blueprint.set_attribute('fov', '110')
        # Provide the position of the sensor relative to the vehicle.
        # transform = carla.Transform(carla.Location(x=0.8, z=1.7))
        transformFrontCam = carla.Transform(carla.Location(x=0.8, z=1.5), carla.Rotation(yaw=0))
        transformRearCam = carla.Transform(carla.Location(x=-1.8, z=1), carla.Rotation(yaw=180))

        # Tell the world to spawn the sensor, don't forget to attach it to your vehicle actor.
        frontCam = world.spawn_actor(blueprint, transformFrontCam, attach_to=vehicleEgo)
        rearCam = world.spawn_actor(blueprint, transformRearCam , attach_to=vehicleEgo)

        # Subscribe to the sensor stream by providing a callback function, this function is
        # called each time a new image is generated by the sensor.
        frontCam.listen(lambda image: image.save_to_disk('output/front/%06d.png' % image.frame_number))
        rearCam.listen(lambda image: image.save_to_disk('output/rear/%06d.png' % image.frame_number))
        actor_list.append(frontCam)
        actor_list.append(rearCam)

        time.sleep(5)
        vehicleEgo.apply_control(carla.VehicleControl(throttle=.7))
        time.sleep(3.8)
        vehicleObservable.apply_control(carla.VehicleControl(throttle=1))
        time.sleep(2.6)
        vehicleEgo.apply_control(carla.VehicleControl(hand_brake=True))
        time.sleep(3.5)

    finally:
        print('destroying actors')
        for actor in actor_list:
            actor.destroy()
        print('done.')

if __name__ == '__main__':

    main()
